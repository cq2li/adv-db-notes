# Open Database Connectivity

1. Standard API for accessing DBMS. ODBC is designed to be independent of database systems and operating systems. An application written using ODBC can be ported to other platforms, both on the client and server side, with few changes to the data access code.

2. ODBC was originally developed by Microsoft and Simba Technologies during the early 1990s.

3. ODBC is based on the device driver model, where the driver encapsulates the logic needed to convert a standard set of commands and functions into the specific calls required by the underlying system. A driver encapsulate many functions that can be broken down into categories:
    + One set of functions is primarily concerned with finding, connecting to and disconnecting from the DBMS that driver talks to.
    + A second set is used to send SQL commands from the ODBC system to the DBMS, converting or interpreting any commands that are not supported internally. For instance, a DBMS that does not support cursors can emulate this functionality in the driver.
    + Finally, another set of commands, mostly used internally, is used to convert data from the DBMS's internal formats to a set of standardized ODBC formats, which are based on the C language formats.

4. Every major relational DBMS will have an ODBC implementation.
    
%% ==================================================================

# Java Database Connectivity

1. Sun Microsystems used ODBC as the basis for their own open standard, Java Database Connectivity (JDBC). JDBC can be considered a version of ODBC for the programming language Java instead of C.

2. Four types of JDBC drivers
    + JDBC-ODBC Bridge: Convert JDBC method calls into ODBC function calls. No longer supported as of JDK 1.8
    + Native-API Driver: Converts JDBC method calls into native calls of the database API.
    + Network-Protocol Driver: Driver connects to a middleware between the calling program and the DBMS. The middleware converts JDBC calls directly or indirectly into a vendor-specific database protocol.
    + Database-Protocol Driver: Driver implementation that converts JDBC calls directly into a vendor-specific database protocol.
    
%% ==================================================================

# Database Networking Protocols

1. The major DBMSs implement their own propietary network protocol. Protocols are always implemented over TCP/IP. A typical interaction with a client has the following steps:
    + Client connects to DBMS and begins authentication process. There may be an SSL handshake here.
    + Client then sends a query
    + The DBMS executes the query and serializes the results
    + Serialized result is sent back to the client.

2. Newer systems implement one of the open-source DBMS network protocols. This allows them to reuse the client drivers (which is costly):
    + MySQL: MemSQL, Clustrix, TiDB, ActorDB
    + Postgres: Redshift, Greenplum, Vertica, HyPer, CockroachDB, Peloton.
    + Hive: Spark

%% ==================================================================

# Result Set Serialization

1. Postgres
    + Simple protocol.
    + Every single row is transfered in a separate protocol message.
    + The amount of meta-data sent per row is large.
    + A lot of the data is repetitive and redundant.

2. MySQL
    + Binary coding for metadata and ASCII encoding for actual data.
    + Field lengths are encoded as variable-length integers.
    + Redundant sequence number.
    
3. Oracle
    + Terse, much more computationally heavy than Postgres.
    + Each row is prefixed by the packet header followed by values.
    + Every value is prefixed by its length stored as a variable-length integer.
    + Numeric values are stored in the propietary Oracle number format.
    
4. MonetDB
    + Encodes all values as ASCII data. Avoids problems with endianes, transferring leading zeroes, and variable-length strings.
    + Values are delimited in the packet similar to a CSV file (i.e., with a special field delimiter and a newline to indicate the end of a tuple).
    + Missing values are encoded as the string "NULL"
    + Converting binary data to strings and back is expensive.

5. Hive
    + Uses a columnar result format.
    + Relies on Thrift for serialization, thus there is extra meta-data for reassembling the message on the client side.
    + But because it is a columnar layout, this meta-data overhead is on a per column basis instead of per row.

%% ==================================================================

# Protocol Design Space

1. Row/Column
    + ODBC/JDBC are inherently row-oriented APIs.
    + Data analysis packages operate on columns.

2. Compression
    + Naive Compression
    + Columnar-specific encoding
    
3. Data Serialization
    + The closer the serialized format is to the DBMS's binary format, the lower the overhead.
    + Need to handle endianess.
    
4. String Handling
    + Null Termination
    + Length-Prefixing
    + Fixed Width

%% ==================================================================

# Kernel Bypass

1. The TCP/IP stack is slow. Every packet has to go through the kernel, where it is copied multiple times before it is given to the DBMS process. There are methods to avoid this overhead and achieve low-latency, high-throughput networking.
    + No system calls are required for communicating, and no data copying ever occurs.
    + Separation of the network stack into kernel space means that costly context switches are needed to perform network operations, and that data copies must be performed to transfer data from kernel buffers to user buffers and vice-versa.
    + Linux is a time-sharing system, and so must rely on slow, expensive interrupt to notify the kernel that there are new packets to be processed.
    + Linux is heavily threaded, so all data structures are protected with locks. While a huge effort has made Linux very scalable, this is not without limitations and contention occurs at large core counts. Even without contention, the locking primitives themselves are relatively slow and impact networking performance.
    Source: https://www.scylladb.com/product/technology/networking/

1. RDMA

2. DPDK


%% ==================================================================
